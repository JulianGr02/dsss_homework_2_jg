import unittest
from math_quiz import get_random_integer, get_random_operator, generate_problem_and_solution

class TestMathGame(unittest.TestCase):

    def test_get_random_integer(self):
        # Test if random numbers generated by get_random_integer are within the specified range
        min_val = 1
        max_val = 10
        for _ in range(1000):  # Test a large number of random values
            rand_num = get_random_integer(min_val, max_val)
            self.assertTrue(min_val <= rand_num <= max_val,
                            f"Generated number {rand_num} is not within range {min_val} to {max_val}")

    def test_get_random_operator(self):
        # Test if get_random_operator returns one of the expected operators
        expected_operators = {'+', '-', '*'}
        for _ in range(1000):  # Test a large number of random operators
            operator = get_random_operator()
            self.assertIn(operator, expected_operators,
                          f"Generated operator {operator} is not one of the expected operators {expected_operators}")

    def test_generate_problem_and_solution(self):
        # Define test cases as tuples of (num1, num2, operator, expected_problem, expected_answer)
        test_cases = [
            (5, 2, '+', '5 + 2', 7),
            (10, 3, '-', '10 - 3', 7),
            (4, 5, '*', '4 * 5', 20),
            (0, 0, '+', '0 + 0', 0),
            (7, 8, '*', '7 * 8', 56),
            (9, 3, '-', '9 - 3', 6)
        ]

        for num1, num2, operator, expected_problem, expected_answer in test_cases:
            problem, answer = generate_problem_and_solution(num1, num2, operator)
            self.assertEqual(problem, expected_problem,
                             f"Expected problem '{expected_problem}', got '{problem}'")
            self.assertEqual(answer, expected_answer,
                             f"Expected answer {expected_answer}, got {answer}")

if __name__ == "__main__":
    unittest.main()

